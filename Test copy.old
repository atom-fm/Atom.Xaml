<?php

use Atom\Xaml\XamlBuilder;

include "vendor/autoload.php";

class Component implements IComponentContent, IComponentContainer
{
    public $content = "";
    public $items = [];
    public $attributes = [];

    public function hasComponents(): bool
    {
        return count($this->items) > 0;
    }

    public function addComponent(object $item): void
    {
        $this->items[] = $item;
    }

    public function setContent(string $content): void
    {
        $this->content = $content;
    }

    public function setAttributes(array $attributes): void
    {
        $this->attributes = $attributes;
    }

    public function renderClidren()
    {
        $result = "";
        foreach ($this->items as $item) {
            $result .= $item->render();
        }
        return $result;
    }

    public function render()
    {
        return $this->renderClidren();
    }
}


class ContentControl extends Component
{
    private $controlContent = "";

    public function setAttributes(array $attributes): void
    {
        foreach ($attributes as $key => $value) {
            $this->attributes[$key] = $value;
        }
    }

    public function setControlContent(string $content)
    {
        $this->controlContent = $content;
    }

    public function render()
    {
        preg_match_all("/{{(\w+)}}/", $this->content, $matches);
        $map = [];

        if (isset($matches[1])) {
            $tags = $matches[1];
            foreach ($tags as $tag) {
                $map["{{".$tag."}}"] = $this->attributes[$tag] ?? "";
            }
        }

        if ($this->hasComponents()) {
            $map["{{controlContent}}"] = $this->controlContent;
            $map["{{content}}"] = $this->renderClidren();
        } else {
            $map["{{content}}"] = $this->controlContent;
        }

        return strtr($this->content, $map);
    }
}

class PhpCode extends Component
{
    public function render()
    {
        ob_start();
        try {
            eval($this->content);
        } catch (Exception $e) {
            echo $e->getMessage();
        }
        $content = ob_get_contents();
        ob_clean();
        return $content;
    }
}


class Page extends Component
{
    public $title;
}

class Code extends Component
{
    public $lang;
    public $title = "";

    public function render()
    {
        $content = $this->trim($this->content);
        $content = htmlentities($content);

        return "<i>{$this->title}</i><pre><code class=\"lang-{$this->lang}\">{$content}</code></pre>";
    }

    private function trim($content)
    {
        $content = trim($content, "\r\n");
        $lines = explode("\n", $content);
        $minLen = strlen($content);
        foreach ($lines as $line) {
            if (trim($line) !== "") {
                $len = $this->indentLength($line);
                $minLen = min($minLen, $len);
            }
        }
        $lines = array_map(function ($line) use ($minLen) {
            return trim(substr($line, $minLen), "\r\n");
        }, $lines);
        return implode("\r", $lines);
    }

    public function indentLength($line)
    {
        $i = 0;
        while ($i < strlen($line)) {
            if ($line[$i] !== " ") {
                break;
            }
            $i++;
        }
        return $i;
    }
}

class Repeat extends Component
{
    public $count = 10;

    public function render()
    {
        $n = (int)$this->count;
        $result = "";
        for ($i = 0; $i < $n; $i++) {
            $result .= "<div style='margin:10px'>" . $this->renderClidren() . "</div>";
        }
        return "<div style='display:flex;flex-flow:wrap'>$result</div>";
    }
}

class Form extends Component
{
    public $method;

    public function render()
    {
        return "<form>" . $this->renderClidren() ."</form>";
    }
}

class Entery extends Component
{
    public $field = "";
    public $title = "";
    public $message = "";
    public $type = "text";
    public $placeholder = "";

    public function render()
    {
        return <<<HTML
        <label for="{$this->field}">{$this->title}</label>
        <input type="{$this->type}" class="form-control" id="{$this->field}" placeholder="{$this->placeholder}">
        <small id="{$this->field}" class="form-text text-muted">{$this->message}</small>
        HTML;
    }
}

class HtmlBlock extends Component
{
    public function render()
    {
        return $this->content;
    }
}

class Table extends Component
{
    public $rows = 10;
    public $title = "";

    public function render()
    {
        $rows = (int)$this->rows;
        $result = "<h2>{$this->title}</h2><table class='table table-condensed'>";
        for ($i = 0; $i < $rows; $i++) {
            $result .=
            "<tr>
                <td> {$i}. </td>
                <td> Hello </td>
                <td> Hello </td>
                <td> Hello </td>
            </tr>";
        }
        $result .= "</table>";
        return $result;
    }
}


$builder = new XamlBuilder();

$builder->component("Component", Component::class);
$builder->component("Repeat", Repeat::class);
$builder->component("ContentControl", ContentControl::class);
$builder->component("PhpCode", PhpCode::class);
$builder->component("Page", Page::class);
$builder->component("Page", Page::class);
$builder->component("Form", Form::class);
$builder->component("Code", Code::class);
$builder->component("Entery", Entery::class);
$builder->component("HtmlBlock", HtmlBlock::class);
$builder->component("Table", Table::class);
$builder->component("Alert", __DIR__ ."/Bootstrap/Alert.xaml");
$builder->component("Button", __DIR__ ."/Bootstrap/Button.xaml");
$builder->component("FormGroup", __DIR__ ."/Bootstrap/FormGroup.xaml");
$builder->component("Note", __DIR__ ."/Bootstrap/Note.xaml");

$result = $builder->parse(file_get_contents("Template.xaml"));


echo <<<HTML
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.18.1/highlight.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.18.1/styles/vs2015.min.css"
    integrity="sha256-9uLiFREx/Kkjh/rMpeUWdi+3+cr7Nr7GJukKXFp5qwU=" crossorigin="anonymous" />

    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
<script>hljs.initHighlightingOnLoad();</script>

    <script src="hotreload.js" guid="294f372e-874d-443e-82eb-99385889196e"></script>
    <style>
        body { padding: 20px}
    </style>
HTML;

echo $result->render();
